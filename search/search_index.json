{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Remote GPIO Control Application allows control GPIO port on Pi devices via android application client or build in www client. Main features Control the states of output pins Read the states of input pins Control software PWM output pins Link multiple pi devices Create sequential execution chains through all linked pi devices Define and run custom shell commands Read/store data from sensors build in support for: Temperature DS18B20 Temperature and humidity DHT * Luminosity Sensor TSL2561 Rotary encoder KY040 Range sensor HC-SR04 custom sensor (create own script to return value) Transmit or recive radio frequency codes with generic low-cost GPIO RF modules Create automated actions to change output/pwm, execude chain sequence, transmit RF or run custom command, such actions can have multiple triggers through all linked pi devices with custom conjunction Create android desktop widget for fast output change, read sensors value or execude chain sequence Setup android notification base on output/input status or sensor value Preview Web client preview Android client preview Support Tested and working on Raspberry Pi devices with Raspiain OS. Tested and working with Banana Pi devices with this library. Tested and working with Orange Pi Zero devices with this library. (Import replacement from \"import RPi.GPIO as GPIO\" to \"import OPi.GPIO as GPIO\" in file rgc-server.py is necessary) Should work on similar devices/OS's but it requires a library RPi.GPIO (Raspbian OS already has it) or another based on it. License Remote GPIO control server is available under the MIT license . Donation If you like this project please consider a donation:","title":"Home"},{"location":"#remote-gpio-control","text":"Application allows control GPIO port on Pi devices via android application client or build in www client.","title":"Remote GPIO Control"},{"location":"#main-features","text":"Control the states of output pins Read the states of input pins Control software PWM output pins Link multiple pi devices Create sequential execution chains through all linked pi devices Define and run custom shell commands Read/store data from sensors build in support for: Temperature DS18B20 Temperature and humidity DHT * Luminosity Sensor TSL2561 Rotary encoder KY040 Range sensor HC-SR04 custom sensor (create own script to return value) Transmit or recive radio frequency codes with generic low-cost GPIO RF modules Create automated actions to change output/pwm, execude chain sequence, transmit RF or run custom command, such actions can have multiple triggers through all linked pi devices with custom conjunction Create android desktop widget for fast output change, read sensors value or execude chain sequence Setup android notification base on output/input status or sensor value","title":"Main features"},{"location":"#preview","text":"","title":"Preview"},{"location":"#web-client-preview","text":"","title":"Web client preview"},{"location":"#android-client-preview","text":"","title":"Android client preview"},{"location":"#support","text":"Tested and working on Raspberry Pi devices with Raspiain OS. Tested and working with Banana Pi devices with this library. Tested and working with Orange Pi Zero devices with this library. (Import replacement from \"import RPi.GPIO as GPIO\" to \"import OPi.GPIO as GPIO\" in file rgc-server.py is necessary) Should work on similar devices/OS's but it requires a library RPi.GPIO (Raspbian OS already has it) or another based on it.","title":"Support"},{"location":"#license","text":"Remote GPIO control server is available under the MIT license .","title":"License"},{"location":"#donation","text":"If you like this project please consider a donation:","title":"Donation"},{"location":"DHT/","text":"DHT Connect sensor e.g(data pin can be attached to any GPIO pin you prefer): Install necessary tools sudo apt-get install git-core build-essential python-pip Now install the Adafruit DHT library: Enter this at the command prompt to download the library: git clone https://github.com/adafruit/Adafruit_Python_DHT.git cd Adafruit_Python_DHT python -m pip install --upgrade pip setuptools wheel Then install the library with: sudo python setup.py install Enable and configure sensor in config file","title":"Temperature and humidity DHT*"},{"location":"DHT/#dht","text":"Connect sensor e.g(data pin can be attached to any GPIO pin you prefer):","title":"DHT"},{"location":"DHT/#install-necessary-tools","text":"sudo apt-get install git-core build-essential python-pip","title":"Install necessary tools"},{"location":"DHT/#now-install-the-adafruit-dht-library","text":"Enter this at the command prompt to download the library: git clone https://github.com/adafruit/Adafruit_Python_DHT.git cd Adafruit_Python_DHT python -m pip install --upgrade pip setuptools wheel Then install the library with: sudo python setup.py install Enable and configure sensor in config file","title":"Now install the Adafruit DHT library:"},{"location":"DS18B20/","text":"DS18B20 Connect sensors: Add the following lines to /boot/config.txt: dtoverlay=w1-gpio Enable the 1-Wire protocol with it: sudo modprobe w1-gpio sudo modprobe w1-therm We can find out if it worked by entering the following: lsmod The modules should now be listed, if not a GPIO pin other than 4 is used or an error occurred while activating. So that the modules are loaded at every start, we enter them into the file /etc/modules: sudo nano /etc/modules and last add the following two lines: w1_gpio w1_therm Finally reboot: sudo reboot Now check if sensors are visible: cd /sys/bus/w1/devices/ ls Enable sensor in config file","title":"Temperature DS18B20"},{"location":"DS18B20/#ds18b20","text":"Connect sensors: Add the following lines to /boot/config.txt: dtoverlay=w1-gpio Enable the 1-Wire protocol with it: sudo modprobe w1-gpio sudo modprobe w1-therm We can find out if it worked by entering the following: lsmod The modules should now be listed, if not a GPIO pin other than 4 is used or an error occurred while activating. So that the modules are loaded at every start, we enter them into the file /etc/modules: sudo nano /etc/modules and last add the following two lines: w1_gpio w1_therm Finally reboot: sudo reboot Now check if sensors are visible: cd /sys/bus/w1/devices/ ls Enable sensor in config file","title":"DS18B20"},{"location":"RF/","text":"Radio frequency (433/315Mhz) transmiter and reciver Connect radio modules: (Any other GPIO pin can be used for data) Install WiringPi lib: sudo apt-get update sudo apt-get install wiringpi Enable and configure modules in config file","title":"RF 433/315Mhz modules"},{"location":"RF/#radio-frequency-433315mhz-transmiter-and-reciver","text":"Connect radio modules: (Any other GPIO pin can be used for data) Install WiringPi lib: sudo apt-get update sudo apt-get install wiringpi Enable and configure modules in config file","title":"Radio frequency (433/315Mhz) transmiter and reciver"},{"location":"Range%20sensor/","text":"Range sensor HC-SR04 Connect sensor: VCC Connects to Pin 2 (5v) Trig Connects to Pin 7 (GPIO 4, Any other can be used) Echo Connects to R1 (1k \u2126) R2 (2k \u2126) Connects from R1 to Ground Wire from R1 and R2 connects to Pin 11 (GPIO 17, Any other can be used) GND connects to Pin 6 (Ground) Enable and configure sensor in config file","title":"Range sensor HC-SR04"},{"location":"Range%20sensor/#range-sensor-hc-sr04","text":"Connect sensor: VCC Connects to Pin 2 (5v) Trig Connects to Pin 7 (GPIO 4, Any other can be used) Echo Connects to R1 (1k \u2126) R2 (2k \u2126) Connects from R1 to Ground Wire from R1 and R2 connects to Pin 11 (GPIO 17, Any other can be used) GND connects to Pin 6 (Ground) Enable and configure sensor in config file","title":"Range sensor HC-SR04"},{"location":"Rotary%20encoder/","text":"Rotary encoder Keyes-40 Connect encooder: (Any other GPIO pin can be used for clk/dt) Enable and configure sensor in config file","title":"Rotary encoder KY040"},{"location":"Rotary%20encoder/#rotary-encoder-keyes-40","text":"Connect encooder: (Any other GPIO pin can be used for clk/dt) Enable and configure sensor in config file","title":"Rotary encoder Keyes-40"},{"location":"TSL2561/","text":"TSL2561 Connect sensor to I2C: Configure i2c on the Raspberry Pi sudo apt-get install i2c-tools python-smbus Add the following lines to /boot/config.txt: #i2c dtparam=i2c_arm=on,i2c1=on Edit the file /etc/modules and add the following line: i2c-dev Finally reboot: sudo reboot After the reboot you should be able to find the i2c device using the command below: sudo i2cdetect -y 1 Enable and configure sensor in config file","title":"Luminosity Sensor TSL2561"},{"location":"TSL2561/#tsl2561","text":"Connect sensor to I2C:","title":"TSL2561"},{"location":"TSL2561/#configure-i2c-on-the-raspberry-pi","text":"sudo apt-get install i2c-tools python-smbus Add the following lines to /boot/config.txt: #i2c dtparam=i2c_arm=on,i2c1=on Edit the file /etc/modules and add the following line: i2c-dev Finally reboot: sudo reboot After the reboot you should be able to find the i2c device using the command below: sudo i2cdetect -y 1 Enable and configure sensor in config file","title":"Configure i2c on the Raspberry Pi"},{"location":"instalation/","text":"Installation Download and unpack last release wget -O rgc-install.tar.gz https://github.com/arek125/remote-GPIO-control-server/releases/latest/download/rgc-install.tar.gz tar -zxvf rgc-install.tar.gz cd rgc Install necessary packages sudo apt-get update sudo apt-get install python-dev python-crypto python-systemd python-pip postgresql libpq-dev postgresql-client sudo pip install psycopg2 psutil In case of: E: Unable to locate package python-systemd Add backports repository: sudo nano /etc/apt/sources.list Paste line: For stretch: deb http://archive.debian.org/debian stretch-backports main For jessie: deb http://archive.debian.org/debian jessie-backports main sudo apt-get update Create postgresql user and database sudo su postgres createuser pi -P --interactive # set super user to yes psql CREATE DATABASE db_rgc; #Ctrl+D #Ctrl+D Create systemd service sudo chmod 644 rgc-setup.sh sudo bash rgc-setup.sh Configure server config sudo nano rgc-config.ini # configure sql connection there and any other parameters as neded More about server config Keep time on server and client synchronized (diffrent timezones are supported). Server control Use commands to control server app: sudo systemctl start rgc.service sudo systemctl stop rgc.service sudo systemctl restart rgc.service sudo systemctl status rgc.service journalctl -u rgc.service # to see logs in case of problems (avalible form client too) Server access To access web app go to http://deviceIpOrHost:port (eg. http://192.168.1.4:80) To access from android app, install apk file and configure connection. Update cd /home/pi # or go to rgc main folder destination wget -O rgc-update.tar.gz https://github.com/arek125/remote-GPIO-control-server/releases/latest/download/rgc-update.tar.gz tar -zxvf rgc-update.tar.gz sudo systemctl restart rgc.service","title":"Installation"},{"location":"instalation/#installation","text":"","title":"Installation"},{"location":"instalation/#download-and-unpack-last-release","text":"wget -O rgc-install.tar.gz https://github.com/arek125/remote-GPIO-control-server/releases/latest/download/rgc-install.tar.gz tar -zxvf rgc-install.tar.gz cd rgc","title":"Download and unpack last release"},{"location":"instalation/#install-necessary-packages","text":"sudo apt-get update sudo apt-get install python-dev python-crypto python-systemd python-pip postgresql libpq-dev postgresql-client sudo pip install psycopg2 psutil In case of: E: Unable to locate package python-systemd Add backports repository: sudo nano /etc/apt/sources.list Paste line: For stretch: deb http://archive.debian.org/debian stretch-backports main For jessie: deb http://archive.debian.org/debian jessie-backports main sudo apt-get update","title":"Install necessary packages"},{"location":"instalation/#create-postgresql-user-and-database","text":"sudo su postgres createuser pi -P --interactive # set super user to yes psql CREATE DATABASE db_rgc; #Ctrl+D #Ctrl+D","title":"Create postgresql user and database"},{"location":"instalation/#create-systemd-service","text":"sudo chmod 644 rgc-setup.sh sudo bash rgc-setup.sh","title":"Create systemd service"},{"location":"instalation/#configure-server-config","text":"sudo nano rgc-config.ini # configure sql connection there and any other parameters as neded More about server config Keep time on server and client synchronized (diffrent timezones are supported).","title":"Configure server config"},{"location":"instalation/#server-control","text":"Use commands to control server app: sudo systemctl start rgc.service sudo systemctl stop rgc.service sudo systemctl restart rgc.service sudo systemctl status rgc.service journalctl -u rgc.service # to see logs in case of problems (avalible form client too)","title":"Server control"},{"location":"instalation/#server-access","text":"To access web app go to http://deviceIpOrHost:port (eg. http://192.168.1.4:80) To access from android app, install apk file and configure connection.","title":"Server access"},{"location":"instalation/#update","text":"cd /home/pi # or go to rgc main folder destination wget -O rgc-update.tar.gz https://github.com/arek125/remote-GPIO-control-server/releases/latest/download/rgc-update.tar.gz tar -zxvf rgc-update.tar.gz sudo systemctl restart rgc.service","title":"Update"},{"location":"serverConfig/","text":"Server config overview Server config can be edited directly from file: sudo nano rgc-config.ini Or from web client: Home (config button) Every time when config is changed server restart is required (web client will ask for it): sudo systemctl restart rgc.service Postgresql config [postgresql] host = localhost user = root password = SECRET db = db_rgc Is necessary to set it before first start. Main config [main] mode = all mobilePort = 8888 wwwPort = 80 debug = no passwordEnabled = no password = SECRET By setting mode = all both server (mobile and web) are runnig, limit it to one by setting mode = wwwOnly or mode = mobileOnly . mobilePort for android connection (UDP and TCP) wwwPort for http connection By setting passwordEnabled = yes encritpion is enabled and access is protected with setted password Sensors config [sensors] ds18b20 = no dht = no dhtType = 11 dhtGpio = -1 tsl2561 = no tsl2561Gain = 0 rotaryEncoder = no rotaryEncoderClk = -1 rotaryEncoderDt = -1 rotaryEncoderMax = 10 rotaryEncoderMin = 0 rangeSensor = no rangeSensorTrigger = -1 rangeSensorEcho = -1 rangeSensorMaxValue = 340 ds18b20 all conected to 1wire yes or no dhtType 11 or 22 or AM2302 (comma separated for more) dhtGpio GPIO BCM PIN number (comma separated for more) tsl2561Gain from 1-16 or 0 for auto gain rotaryEncoderClk GPIO BCM PIN number (comma separated for more) rotaryEncoderDt GPIO BCM PIN number (comma separated for more) rotaryEncoderMax max value of counter (comma separated for more) rotaryEncoderMin min value of counter (comma separated for more) rangeSensorTrigger GPIO BCM PIN number rangeSensorEcho GPIO BCM PIN number rangeSensorMaxValue value in cm Radio frequency [rf] reciver = no reciverGpio = -1 transmiter = no transmiterGpio = -1 reciverGpio GPIO BCM PIN number transmiterGpio GPIO BCM PIN number","title":"Config"},{"location":"serverConfig/#server-config-overview","text":"Server config can be edited directly from file: sudo nano rgc-config.ini Or from web client: Home (config button) Every time when config is changed server restart is required (web client will ask for it): sudo systemctl restart rgc.service","title":"Server config overview"},{"location":"serverConfig/#postgresql-config","text":"[postgresql] host = localhost user = root password = SECRET db = db_rgc Is necessary to set it before first start.","title":"Postgresql config"},{"location":"serverConfig/#main-config","text":"[main] mode = all mobilePort = 8888 wwwPort = 80 debug = no passwordEnabled = no password = SECRET By setting mode = all both server (mobile and web) are runnig, limit it to one by setting mode = wwwOnly or mode = mobileOnly . mobilePort for android connection (UDP and TCP) wwwPort for http connection By setting passwordEnabled = yes encritpion is enabled and access is protected with setted password","title":"Main config"},{"location":"serverConfig/#sensors-config","text":"[sensors] ds18b20 = no dht = no dhtType = 11 dhtGpio = -1 tsl2561 = no tsl2561Gain = 0 rotaryEncoder = no rotaryEncoderClk = -1 rotaryEncoderDt = -1 rotaryEncoderMax = 10 rotaryEncoderMin = 0 rangeSensor = no rangeSensorTrigger = -1 rangeSensorEcho = -1 rangeSensorMaxValue = 340 ds18b20 all conected to 1wire yes or no dhtType 11 or 22 or AM2302 (comma separated for more) dhtGpio GPIO BCM PIN number (comma separated for more) tsl2561Gain from 1-16 or 0 for auto gain rotaryEncoderClk GPIO BCM PIN number (comma separated for more) rotaryEncoderDt GPIO BCM PIN number (comma separated for more) rotaryEncoderMax max value of counter (comma separated for more) rotaryEncoderMin min value of counter (comma separated for more) rangeSensorTrigger GPIO BCM PIN number rangeSensorEcho GPIO BCM PIN number rangeSensorMaxValue value in cm","title":"Sensors config"},{"location":"serverConfig/#radio-frequency","text":"[rf] reciver = no reciverGpio = -1 transmiter = no transmiterGpio = -1 reciverGpio GPIO BCM PIN number transmiterGpio GPIO BCM PIN number","title":"Radio frequency"},{"location":"usage/","text":"Web Client GPIO Outputs Example with led and buzzer connected. Control GPIO outputs by setting state at LOW or HIGH. Multiple pins can be used as one tile. BCM Pinout ![](img/header_pinout.jpg) With reverse checkbox, colors of button can be reversed for LOW/HIGH state. Tiles can be defined to act like: on/off switch (click will turn in on and next click will turn it off) pushbutton (click and hold will turn in on and release will turn it off) GPIO Inputs Example with hardware pushbutton: Read GPIO inputs state by color. Single pin can be used for one tile. BCM Pinout ![](img/header_pinout.jpg) With reverse checkbox, colors of button can be reversed for LOW/HIGH state. Software PWM Outputs Example with servo connected. Control Software PWM Outputs by turning PWM on or off, when turned on control frequency and duty cycle. Multiple pins can be used as one tile. BCM Pinout ![](img/header_pinout.jpg) With reverse checkbox, duty cycle slider can be placed up side down. Custom shell commands Example with python file: import random print random.randint(1,101) Execute custom shell commands, this can be bash command or execution of script file in any language. Result will be saved according to what script/command print/return. With wait checkbox checked client will wait (in the same thread as execution) for result and print it, otherwise seperate thread will be created. Sensors Example with DHT11, range and custom sensor. Read predefined in config or custom sensors values. If sensor is correctly defined in config and connected it will be automaticly listed here. Custom sensor can be defined here. Options: History save interval (seconds) - Defines how often the data from the sensor are to be save History range back (days) - Defines how big sensor log can be For custom only: The unit will be displayed next to the value Gpio BCM (if custom sensor uses), it will prevent for that pins to used in other cases Data name - for info only Data source - it must be early defined with custom shell command (single execution must return only numeric value) By selecting each sensors, values will be compared on chart. Radio frequency Transmit/Recive Codes At least one module must be connected and configured for this to work. Each configured tile is seperate code for recive or transmit. If code recive is detected it will be displayed in history, to transmit code click on configured tile. Sniffer It can be used to sniff all transmited codes in area. I push buttons in rf remote in below gif. Linked PI's Link multiple pi devices (with rgc setup), this can be used for chains execution a cross them, or automation. Both connections type (www or mobile) are supported. Global variables They can be used to create some more advanced automations or chain sequences. Four types are available: String (any text), Number, Date and time. Chain sequences Runs multiple actions(bonds) one by one with one click. Built sequence can be runned multiple times afer execution (Execution countdown), if value there is -1 then sequence will be repeted until cancelation. With <> icon execution order of bonds can be changed. Bonds To use specific bond type, source must be first configured in separate tab or in linked device. Bonds(actions) types: Output - to change GPIO output state PWM - to disalbe/enable, set DC, set Frequency of soft. PWM Automated action - to trigger conditions check of configured automated action, if conditions are met then action will run Transmit Radio Frequency code Execude custom command Execude or cancel other chain Set global variable Set number of executions of automated action Set chain execution countdown Each execution can be daleyed with specific time (seconds) All actions can be runned on selected linked device, device must be online and rgc app active in time of configurtion and chain execution. Example 1 - Blinking led and buzzer Example sets on and off early configured GPIO output until will be canceled. Automated actions Configured action start automaticly when conditions(triggers) are met. To use specific action type, source must be first configured in separate tab. Actions types: Output - to change GPIO output state PWM - to disalbe/enable, set DC, set Frequency of soft. PWM Transmit Radio Frequency code Execude custom command Execude or cancel other chain Set global variable Set number of executions of automated action Set chain execution countdown Number of executions can be limited by any number, -1 - unlimited. Checkbox keep logs - if checked executed action will be saved in history log. Triggers(conditions) will be checked every x seconds configured in \"Thread refresh rate\". By defult its 0,3s, you can increase this value if such reaction is not needed or if cpu usage is high. Triggers To use specific trigger, source must be first configured in separate tab or in linked device. Triggers types: Exact date time Time of day Timer Week day Sensor value Input/Output state PWM state PWM frequency PWM dutycycle Run only in chain (if action will be used in chain sequence execution) Ping Recive RF Custom command output Global variable value Linked Input/Output state Linked Sensor value Linked Recive RF Linked global variable value Most triggers types have configurable operator, example of use can be sensor value to trigger action when selected sensor value is bigger then 20 (eg. Sensor value > 20). Conjunction pattern If there is more then one trigger per action, conjunction pattern can be set. By default all triggers conditions must be fulfilled in the same time for action to run. ('#1# and #2#' etc.) Each trigger is a number in pattern (#trigger number#), we can use python conjunction syntax to enter patten of our own. For example we have three triggers and we want to run action if at least one of them is activeted then pattern will be: #1# or #2# or #3# Example 1 - Alarm when smoke detected Alarm (early configured chain of blinking led and buzzer) will go on when smoke sensor (confugired on second linked pi device) change state. Action is also limited to run only beetwen 2:00 and 9:00 o'clock. Example 2 - Activate/Deactivate ralay based on temperature sensor value Scenario: We want to activate relay once, for 20 seconds when temerature sensor value is above 25C. Repeat this action if temperature goes down below 22C and back to above 25C. In addition of sensor and ralay output configuration we need to have variable flag to control automation. Created chain suqence sets relay ON for 20 second and sets variable flag. First automated action check if temperature is above 25C and variable flag is set and then runs created chain suqence. Second automated action check if temperature is below 22C and then sets variable flag. Android Client Connection To connect to the server, connection must be first configured. Make sure that address and port of the server are accesable from network witch phone is connected ! Widgets Avalible widgets are: On/off GPIO output switcher Sensors reader Chains sequence executioner Notifications Android client can push notification when: GPIO output or input change state Sensor reach configured value When 'precise' checkbox is checked, condition will alwes be cheked every interval(field) seconds. (This option can drain battery beceause phone can never enter to sleep mode). Without it condition will be checked as others aplications (15min/30min/12h/24h). Example 1 - Notification when smoke detected Android will notify if smoke(GPIO Input) is detected, with this configuration delay is max 15min.","title":"Usage"},{"location":"usage/#web-client","text":"","title":"Web Client"},{"location":"usage/#gpio-outputs","text":"Example with led and buzzer connected. Control GPIO outputs by setting state at LOW or HIGH. Multiple pins can be used as one tile. BCM Pinout ![](img/header_pinout.jpg) With reverse checkbox, colors of button can be reversed for LOW/HIGH state. Tiles can be defined to act like: on/off switch (click will turn in on and next click will turn it off) pushbutton (click and hold will turn in on and release will turn it off)","title":"GPIO Outputs"},{"location":"usage/#gpio-inputs","text":"Example with hardware pushbutton: Read GPIO inputs state by color. Single pin can be used for one tile. BCM Pinout ![](img/header_pinout.jpg) With reverse checkbox, colors of button can be reversed for LOW/HIGH state.","title":"GPIO Inputs"},{"location":"usage/#software-pwm-outputs","text":"Example with servo connected. Control Software PWM Outputs by turning PWM on or off, when turned on control frequency and duty cycle. Multiple pins can be used as one tile. BCM Pinout ![](img/header_pinout.jpg) With reverse checkbox, duty cycle slider can be placed up side down.","title":"Software PWM Outputs"},{"location":"usage/#custom-shell-commands","text":"Example with python file: import random print random.randint(1,101) Execute custom shell commands, this can be bash command or execution of script file in any language. Result will be saved according to what script/command print/return. With wait checkbox checked client will wait (in the same thread as execution) for result and print it, otherwise seperate thread will be created.","title":"Custom shell commands"},{"location":"usage/#sensors","text":"Example with DHT11, range and custom sensor. Read predefined in config or custom sensors values. If sensor is correctly defined in config and connected it will be automaticly listed here. Custom sensor can be defined here. Options: History save interval (seconds) - Defines how often the data from the sensor are to be save History range back (days) - Defines how big sensor log can be For custom only: The unit will be displayed next to the value Gpio BCM (if custom sensor uses), it will prevent for that pins to used in other cases Data name - for info only Data source - it must be early defined with custom shell command (single execution must return only numeric value) By selecting each sensors, values will be compared on chart.","title":"Sensors"},{"location":"usage/#radio-frequency-transmitrecive-codes","text":"At least one module must be connected and configured for this to work. Each configured tile is seperate code for recive or transmit. If code recive is detected it will be displayed in history, to transmit code click on configured tile.","title":"Radio frequency Transmit/Recive Codes"},{"location":"usage/#sniffer","text":"It can be used to sniff all transmited codes in area. I push buttons in rf remote in below gif.","title":"Sniffer"},{"location":"usage/#linked-pis","text":"Link multiple pi devices (with rgc setup), this can be used for chains execution a cross them, or automation. Both connections type (www or mobile) are supported.","title":"Linked PI's"},{"location":"usage/#global-variables","text":"They can be used to create some more advanced automations or chain sequences. Four types are available: String (any text), Number, Date and time.","title":"Global variables"},{"location":"usage/#chain-sequences","text":"Runs multiple actions(bonds) one by one with one click. Built sequence can be runned multiple times afer execution (Execution countdown), if value there is -1 then sequence will be repeted until cancelation. With <> icon execution order of bonds can be changed.","title":"Chain sequences"},{"location":"usage/#bonds","text":"To use specific bond type, source must be first configured in separate tab or in linked device. Bonds(actions) types: Output - to change GPIO output state PWM - to disalbe/enable, set DC, set Frequency of soft. PWM Automated action - to trigger conditions check of configured automated action, if conditions are met then action will run Transmit Radio Frequency code Execude custom command Execude or cancel other chain Set global variable Set number of executions of automated action Set chain execution countdown Each execution can be daleyed with specific time (seconds) All actions can be runned on selected linked device, device must be online and rgc app active in time of configurtion and chain execution.","title":"Bonds"},{"location":"usage/#example-1-blinking-led-and-buzzer","text":"Example sets on and off early configured GPIO output until will be canceled.","title":"Example 1 - Blinking led and buzzer"},{"location":"usage/#automated-actions","text":"Configured action start automaticly when conditions(triggers) are met. To use specific action type, source must be first configured in separate tab. Actions types: Output - to change GPIO output state PWM - to disalbe/enable, set DC, set Frequency of soft. PWM Transmit Radio Frequency code Execude custom command Execude or cancel other chain Set global variable Set number of executions of automated action Set chain execution countdown Number of executions can be limited by any number, -1 - unlimited. Checkbox keep logs - if checked executed action will be saved in history log. Triggers(conditions) will be checked every x seconds configured in \"Thread refresh rate\". By defult its 0,3s, you can increase this value if such reaction is not needed or if cpu usage is high.","title":"Automated actions"},{"location":"usage/#triggers","text":"To use specific trigger, source must be first configured in separate tab or in linked device. Triggers types: Exact date time Time of day Timer Week day Sensor value Input/Output state PWM state PWM frequency PWM dutycycle Run only in chain (if action will be used in chain sequence execution) Ping Recive RF Custom command output Global variable value Linked Input/Output state Linked Sensor value Linked Recive RF Linked global variable value Most triggers types have configurable operator, example of use can be sensor value to trigger action when selected sensor value is bigger then 20 (eg. Sensor value > 20).","title":"Triggers"},{"location":"usage/#conjunction-pattern","text":"If there is more then one trigger per action, conjunction pattern can be set. By default all triggers conditions must be fulfilled in the same time for action to run. ('#1# and #2#' etc.) Each trigger is a number in pattern (#trigger number#), we can use python conjunction syntax to enter patten of our own. For example we have three triggers and we want to run action if at least one of them is activeted then pattern will be: #1# or #2# or #3#","title":"Conjunction pattern"},{"location":"usage/#example-1-alarm-when-smoke-detected","text":"Alarm (early configured chain of blinking led and buzzer) will go on when smoke sensor (confugired on second linked pi device) change state. Action is also limited to run only beetwen 2:00 and 9:00 o'clock.","title":"Example 1 - Alarm when smoke detected"},{"location":"usage/#example-2-activatedeactivate-ralay-based-on-temperature-sensor-value","text":"Scenario: We want to activate relay once, for 20 seconds when temerature sensor value is above 25C. Repeat this action if temperature goes down below 22C and back to above 25C. In addition of sensor and ralay output configuration we need to have variable flag to control automation. Created chain suqence sets relay ON for 20 second and sets variable flag. First automated action check if temperature is above 25C and variable flag is set and then runs created chain suqence. Second automated action check if temperature is below 22C and then sets variable flag.","title":"Example 2 - Activate/Deactivate ralay based on temperature sensor value"},{"location":"usage/#android-client","text":"","title":"Android Client"},{"location":"usage/#connection","text":"To connect to the server, connection must be first configured. Make sure that address and port of the server are accesable from network witch phone is connected !","title":"Connection"},{"location":"usage/#widgets","text":"Avalible widgets are: On/off GPIO output switcher Sensors reader Chains sequence executioner","title":"Widgets"},{"location":"usage/#notifications","text":"Android client can push notification when: GPIO output or input change state Sensor reach configured value When 'precise' checkbox is checked, condition will alwes be cheked every interval(field) seconds. (This option can drain battery beceause phone can never enter to sleep mode). Without it condition will be checked as others aplications (15min/30min/12h/24h).","title":"Notifications"},{"location":"usage/#example-1-notification-when-smoke-detected","text":"Android will notify if smoke(GPIO Input) is detected, with this configuration delay is max 15min.","title":"Example 1 - Notification when smoke detected"}]}